0 info it worked if it ends with ok
1 verbose cli [ '/usr/bin/node', '/usr/bin/npm', 'publish' ]
2 info using npm@3.5.2
3 info using node@v8.10.0
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/mnt/e/Lamden/lamden-js',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /home/jeff/.npm/lamden-js/1.2.1/package.tgz not in flight; packing
9 info lifecycle lamden-js@1.2.1~prepublish: lamden-js@1.2.1
10 silly lifecycle lamden-js@1.2.1~prepublish: no script for prepublish, continuing
11 verbose tar pack [ '/home/jeff/.npm/lamden-js/1.2.1/package.tgz',
11 verbose tar pack   '/mnt/e/Lamden/lamden-js' ]
12 verbose tarball /home/jeff/.npm/lamden-js/1.2.1/package.tgz
13 verbose folder /mnt/e/Lamden/lamden-js
14 verbose addLocalTarball adding from inside cache /home/jeff/.npm/lamden-js/1.2.1/package.tgz
15 silly cache afterAdd lamden-js@1.2.1
16 verbose afterAdd /home/jeff/.npm/lamden-js/1.2.1/package/package.json not in flight; writing
17 verbose afterAdd /home/jeff/.npm/lamden-js/1.2.1/package/package.json written
18 silly publish { name: 'lamden-js',
18 silly publish   version: '1.2.1',
18 silly publish   description: 'A javascript implementaion for creating wallets, submitting transactions and interacting with masternodes on the Lamden Blockchain.',
18 silly publish   main: 'dist/lamden.js',
18 silly publish   scripts:
18 silly publish    { test: 'npm run build && mocha',
18 silly publish      tests: 'npm run test',
18 silly publish      'test-network': 'npm run build && mocha test/network-test.js',
18 silly publish      'test-masternode_api': 'npm run build && mocha test/masternode_api-test.js',
18 silly publish      'test-transactionBuilder': 'npm run build && mocha test/transactionBuilder-test.js',
18 silly publish      'test-wallet': 'npm run build && mocha test/wallet-test.js',
18 silly publish      build: 'rollup --config',
18 silly publish      'test-cypress': 'npm run build && npx cypress open' },
18 silly publish   repository:
18 silly publish    { type: 'git',
18 silly publish      url: 'git+https://github.com/Lamden/lamden-js.git' },
18 silly publish   keywords: [ 'node', 'npm', 'blockchain', 'lamden' ],
18 silly publish   author: { name: 'Jeff Scott' },
18 silly publish   license: 'MIT',
18 silly publish   bugs: { url: 'https://github.com/Lamden/lamden-js/issues' },
18 silly publish   homepage: 'https://github.com/Lamden/lamden-js#readme',
18 silly publish   dependencies:
18 silly publish    { assert: '1.4.1',
18 silly publish      'big-integer': '1.6.42',
18 silly publish      'capnpc-ts': '^0.4.0',
18 silly publish      events: '^3.1.0',
18 silly publish      jssha: '2.3.1',
18 silly publish      md5: '2.2.1',
18 silly publish      'node-fetch': '^2.6.0',
18 silly publish      tweetnacl: '1.0.1',
18 silly publish      'types-validate-assert': '^1.0.1',
18 silly publish      'node-cryptojs-aes': '^0.4.0' },
18 silly publish   devDependencies:
18 silly publish    { '@babel/core': '^7.8.4',
18 silly publish      mocha: '^7.0.1',
18 silly publish      'expect.js': '^0.3.1',
18 silly publish      rollup: '^1.31.1',
18 silly publish      'rollup-plugin-babel': '^4.3.3',
18 silly publish      'rollup-plugin-commonjs': '^10.1.0',
18 silly publish      'rollup-plugin-node-builtins': '^2.1.2',
18 silly publish      'rollup-plugin-node-globals': '^1.4.0',
18 silly publish      'rollup-plugin-node-resolve': '^5.2.0' },
18 silly publish   readme: '# lamden-js\r\nThis is the Lamden javascript implementation used in the [Lamden Wallet Chrome Extention](https://chrome.google.com/webstore/detail/lamden-wallet-browser-ext/lgkgmnhecgdjiifepobmobkeeeheakko) ([Github](https://github.com/Lamden/wallet)).\r\n\r\nThis package should work in Node.js and Broswer implementations.\r\n\r\n## Install\r\n\r\n```javascript\r\nnpm install lamden-js\r\n```\r\n\r\n## Test\r\n```javascript\r\nnpm run tests\r\n```\r\n\r\n## Add to project\r\n\r\n```javascript\r\nimport Lamden from \'lamden-js\'\r\nor\r\nconst Lamden = require(\'lamden-js\')\r\n```\r\n\r\n## Wallet Functions\r\n### Create a Lamden Keypair\r\n```javascript\r\nlet lamdenWallet = Lamden.wallet.new_wallet()\r\n\r\nconsole.log(lamdenWallet)\r\n>> {\r\n       vk: "ea2cee33f9478d767d67afe345592ef36446ee04f8d588fa76942e6569a53298",\r\n       sk: "69a8db3fb7196debc2711fad1fa1935918d09f5d8900d84c3288ea5237611c03"\r\n   }\r\n```\r\n\r\n### Get a public key (vk) from a private key (sk)\r\n```javascript\r\nlet sk = "69a8db3fb7196debc2711fad1fa1935918d09f5d8900d84c3288ea5237611c03"\r\nlet vk = wallet.get_vk(sk)\r\n\r\nconsole.log(vk)\r\n>> \'ea2cee33f9478d767d67afe345592ef36446ee04f8d588fa76942e6569a53298\'\r\n```\r\n\r\n### Sign a message\r\n```javascript\r\nlet messageBytes = new Uint8Array(\'message\');\r\nlet sk = "69a8db3fb7196debc2711fad1fa1935918d09f5d8900d84c3288ea5237611c03"\r\n\r\nlet signedMessage = wallet.sign(sk, messageBytes)\r\n\r\nconsole.log(signedMessage)\r\n>> \'982c204fe88e620f3319558aa6b11f9d8be75b99b3199f434f5edf2834a9c52059ba4ea3d623ac1d550170e532e919c364aad1333f757f8f22e0355cb1dd8c09\'\r\n```\r\n\r\n#### Verify signature\r\n```javascript\r\nlet validSignature = wallet.verify(vk, messageBytes, signedMessage)\r\n\r\nconsole.log(validSignature)\r\n>> true\r\n```\r\n\r\n## Create a Lamden Transaction\r\nPublick Mockchain host is https://testnet.lamden.io:443\r\n\r\n** Change this to a local testnet [mockchain](https://github.com/Lamden/mockchain) instance if you have one running\r\n\r\n## Create a Lamden Transaction\r\nUse Lamden.TransactionBuilder(networkInfo, txInfo) to create a new Lamden transaction.\r\n\r\n### Create networkInfo object\r\ncreate an object that describes the masternode/network that you are going to send the transcation to\r\n```javascript\r\nlet networkInfo = {\r\n    // Optional: Name of network\r\n    name: \'Lamden Public Mockchain\',\r\n\r\n    // Required: type of network \'mockchain\', \'testnet\', \'mainnet\'\r\n    type: \'mockchain\',\r\n\r\n    // Required: must begin with http or https\r\n    host: \'https://testnet.lamden.io\',\r\n\r\n    // Required: network port\r\n    port: \'443\' \r\n}\r\n```\r\n### Create txInfo object\r\ncreate an object that describes the transaction you are going to send\r\n```javascript\r\n//Sender and Receiver public keys\r\nlet senderVk = "ea2cee33f9478d767d67afe345592ef36446ee04f8d588fa76942e6569a53298"\r\nlet receiverVk = "bb0fab41b9118f0afdabf3721fa9a6caae3c93845ed409d3118841065ad1a197"\r\n\r\n// Kwargs are the arugments you will send the contract method.  \r\n// For example the "currency" contract\'s "transfer" method needs two arguments to create a transfter; the person reciving the TAU and the amount to transfer.  So we create a kwargs object like so.\r\nlet kwargs: {\r\n        to: receiverVk,\r\n        amount: 1000\r\n}\r\n\r\nlet txInfo = {\r\n    senderVk,\r\n    contractName: "currency",\r\n    methodName: "transfer",\r\n    kwargs,\r\n    stampLimit: 50000, //Max stamps to be used. Could use less, won\'t use more.\r\n}\r\n```\r\n\r\n### Create transaction\r\n```javascript\r\nlet tx = new Lamden.TransactionBuilder(networkInfo, txInfo)\r\n```\r\n\r\n### Send transaction\r\n```javascript\r\nlet senderSk = "69a8db3fb7196debc2711fad1fa1935918d09f5d8900d84c3288ea5237611c03"\r\n\r\ntx.send(senderSk, (res, err) => {\r\n    if (err) throw new Error(err)\r\n    console.log(res)\r\n})\r\n\r\n//or\r\n\r\ntx.on(\'response\', (response) => {\r\n    if (tx.resultInfo.type === \'error\') return\r\n    console.log(response)\r\n})\r\ntx.send(senderSk)\r\n\r\n```\r\n\r\nReturns the NEW changed state in the currency contract for whatever variables the transfer method effected.  \r\nIn this case, the <b>*new*</b> balances for both keys is returned\r\n```javascript\r\n{\r\n    state_changes: {\r\n        "currency:balances:ea2cee33f9478d767d67afe345592ef36446ee04f8d588fa76942e6569a53298": "4895.0" // -1005 (amount + stamps)\r\n        "currency:balances:bb0fab41b9118f0afdabf3721fa9a6caae3c93845ed409d3118841065ad1a197": "1000.0" // +1000\r\n    }\r\n    status_code: 0\r\n    stamps_used: 13924\r\n}\r\n```\r\n\r\n## Getting a Nonce and Processor\r\nNote: Nonce and processor will be retrieved from the masternode automatcially when send() is called.\r\n\r\ngetNonce() can be used to set the nonce and processor before hand.\r\n```javascript\r\nlet tx = new Lamden.TransactionBuilder(networkInfo, TxInfo)\r\n\r\ntx.getNonce((res, err) => {\r\n    if (err) {\r\n        console.log("Nonce Not Set")\r\n        return\r\n    }\r\n    console.log(res)\r\n})\r\n\r\n>> {\r\n       "nonce": 37,\r\n       "processor": "0000000000000000000000000000000000000000000000000000000000000000",\r\n       "sender": "ea2cee33f9478d767d67afe345592ef36446ee04f8d588fa76942e6569a53298"\r\n   }\r\n```\r\n\r\n## Network and API\r\nCreate a network instance will allow you to call the masternode API.  This class takes a "networkInfo" object as described above.\r\n\r\n### Create new Network instance\r\n```javascript\r\nlet mockchain = new Network({\r\n    name: \'Lamden Public Mockchain\',\r\n    type: \'mockchain\',\r\n    host: \'https://testnet.lamden.io\', port: \'443\' \r\n})\r\n\r\nmockchain.on(\'online\', online => {\r\n    console.log(online)\r\n    >> true or false\r\n})\r\nmockchain.ping()\r\n```\r\n### Netowrk API Endpoints\r\nAll API methods return a value, Promise or callback if provided\r\n\r\n| method   |      masternode endpoint      |  Description |\r\n|:----------|:-------------:|:------:|\r\n| getContractInfo(contractName)  |  /contracts/*contractName* | Returns the contract code of *contractName* <br> [example](https://testnet.lamden.io/contracts/currency/) |\r\n| getVariable(contractName, variableName, parms) |    /contracts/*contractName*/*variableName*?key=*parm*   |   Retrieve the current state of a contract variable <br> [example](https://testnet.lamden.io/contracts/currency/balances?key=7497cfd946eb332f66fe096d6473aa869cdc3836f1c7ac3630cea68e78228e3e) |\r\n| getContractMethods(contractName) | /contracts/*contractName*/methods |    Returns all methods belonging to *contractName* <br> [example](https://testnet.lamden.io/contracts/currency/methods) |\r\n| pingServer() | /ping | Checks if network is online <br> [example](https://testnet.lamden.io/ping) |\r\n| getCurrencyBalance(vk) | /contracts/currency/balances | A wrapper method for getVariable() which always returns the result of the currency contract\'s balances?key=*vk* <br> [example](https://testnet.lamden.io/contracts/currency/balances?key=7497cfd946eb332f66fe096d6473aa869cdc3836f1c7ac3630cea68e78228e3e)  |\r\n| contractExists(contractName) | /contracts/*contractName*  | a wrapper method for getContractInfo() which returns if a contract exists on the blockchain |\r\n| sendTransaction(txData, *callback*) | / | submits a contract to the network <br> For mockchain networks an immediate block result will be returned <br> For testnet and mainnet a tx_hash will be returned |\r\n| getNonce(senderVk, *callback*) | /nonce/*senderVk* |    Get the current *nonce* and *processor* for a public key (vk) |\r\n| mintTestNetCoins(vk, amount) | /mint |    <b>Mockchain Networks Only</b> <br> Mints Test TAU to a provided publick key (vk) |\r\n| lintCode(name, codeString) | right-aligned |  <b>Mockchain Networks Only</b><br> Returns smart contract errors |\r\n\r\n\r\n## Transpiling Capt\'Proto Schemas to Javascript files (only for schema changes)\r\nThis step only needs to be run if there are changes to the capnp schema files.\r\n\r\nCopy new files to src/capnp/original/\r\nInstall  [Capt\'Proto](https://capnproto.org/install.html)\r\nadd/overwrite capnp files in src/capnp/original then run the below command\r\n```\r\ncapnpc -o js src/capnp/original/* && mv src/capnp/original/*.js src/capnp/js/\r\n```\r\n\r\n',
18 silly publish   readmeFilename: 'README.md',
18 silly publish   gitHead: 'df73da642796bae2bba9479329521b29946ae87a',
18 silly publish   _id: 'lamden-js@1.2.1',
18 silly publish   _shasum: '85bbbc5646dffef838d7ffe14891ad21c6d0c347',
18 silly publish   _from: '.' }
19 verbose getPublishConfig undefined
20 silly mapToRegistry name lamden-js
21 silly mapToRegistry using default registry
22 silly mapToRegistry registry https://registry.npmjs.org/
23 silly mapToRegistry uri https://registry.npmjs.org/lamden-js
24 verbose publish registryBase https://registry.npmjs.org/
25 silly publish uploading /home/jeff/.npm/lamden-js/1.2.1/package.tgz
26 verbose stack Error: auth required for publishing
26 verbose stack     at CachingRegistryClient.publish (/usr/share/npm/node_modules/npm-registry-client/lib/publish.js:30:14)
26 verbose stack     at /usr/share/npm/lib/publish.js:137:14
26 verbose stack     at mapToRegistry (/usr/share/npm/lib/utils/map-to-registry.js:55:3)
26 verbose stack     at publish_ (/usr/share/npm/lib/publish.js:106:3)
26 verbose stack     at Array.<anonymous> (/usr/share/npm/node_modules/slide/lib/bind-actor.js:15:8)
26 verbose stack     at LOOP (/usr/share/npm/node_modules/slide/lib/chain.js:15:14)
26 verbose stack     at LOOP (/usr/share/npm/node_modules/slide/lib/chain.js:14:28)
26 verbose stack     at chain (/usr/share/npm/node_modules/slide/lib/chain.js:20:5)
26 verbose stack     at /usr/share/npm/lib/publish.js:72:5
26 verbose stack     at RES (/usr/share/npm/node_modules/inflight/inflight.js:23:14)
27 verbose cwd /mnt/e/Lamden/lamden-js
28 error Linux 4.4.0-18362-Microsoft
29 error argv "/usr/bin/node" "/usr/bin/npm" "publish"
30 error node v8.10.0
31 error npm  v3.5.2
32 error code ENEEDAUTH
33 error need auth auth required for publishing
34 error need auth You need to authorize this machine using `npm adduser`
35 verbose exit [ 1, true ]
